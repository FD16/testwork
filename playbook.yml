- hosts: all
  tasks:
    # Update all pagkages
  - name: Update all packages
    apt:
      update_cache: yes
      force_apt_get: yes
      cache_valid_time: 3600
  - name : Install multiple packages
    apt: name={{ item }} state=latest update_cache=true
    loop: [apt-transport-https, ca-certificates, curl, gnupg-agent, software-properties-common, mc, sshpass]

# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - name: Add Dockers official GPG key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

# add docker repo
  - name: Add Docker Repository
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/debian bullseye stable
      state: present
# modprobe ip_vs
  - name: insert line in file
    lineinfile: dest=/etc/modules-load.d/modules.conf insertafter="^ name." line="ip_vs"

# install docker
  - name: Update apt and install docker-ce
    apt: name={{ item }} state=latest update_cache=true
    loop: [docker-ce, docker-ce-cli]

# start docker
  - name: reload systemd daemons
    systemd:
        daemon_reload: yes

  - name: gather service facts
    ansible.builtin.service_facts:
  - name: start docker
    become: yes
    become_user: root
    systemd:
      name: docker
      state: started
      enabled: yes
    when: ansible_facts.services['docker.service'] is defined and ansible_facts.services['docker.service'].state != 'running'
# usermod -aG docker root
  - name: Add user to docker group
    ansible.builtin.user:
      name: USERNAME
      groups: docker
      append: true
# swarm
  - name: Get docker info
    shell: docker info
    register: docker_info
    changed_when: False

- hosts: masters
  tasks:
    - name: Create primary swarm manager
      shell: docker swarm init --advertise-addr {{ ansible_default_ipv4.address }}
      when: "docker_info.stdout.find('Swarm: inactive') > 0"
    - name: Get docker swarm manager token
      shell: docker swarm join-token -q manager
      register: swarm_manager_token
    - name: Get docker swarm worker token
      shell: docker swarm join-token -q worker
      register: swarm_worker_token
    - copy:
        content: '{{ swarm_worker_token.stdout }}'
        dest: '/tmp/dsm_wt'
    - name: Include only files matching
      ansible.builtin.include_vars:
        dir: vars
        files_matching: vars.yml
    - name: copy file token node 1
      shell: sshpass -p {{ sshpwd }} scp -o  StrictHostKeyChecking=no /tmp/dsm_wt root@{{ node1 }}:/tmp
    - name: copy file token node 2
      shell: sshpass -p {{ sshpwd }} scp -o  StrictHostKeyChecking=no /tmp/dsm_wt root@{{ node2 }}:/tmp    
- hosts: workers
  tasks:
    - name: Cat token and register him
      shell: cat /tmp/dsm_wt
      register: master_token
    - name: Join the Swarm
      shell: "docker swarm join --token {{ master_token.stdout }} {{ master_ip }}:2377"
      when: "docker_info.stdout.find('Swarm: inactive') > 0"
      retries: 5
      delay: 5  
- hosts: masters
  tasks:
    - name: deploy nginx
      shell: docker service create --name nginx --replicas 3 --publish published=8080,target=80 nginx:latest
    - name: Smoketest Nginx
      uri:
        url: "http://{{ master_ip }}:8080"
        status_code: 200
      register: result

    - debug:
        msg: "Nginx контейнер работает успешно!"
      when: result.status == 200


